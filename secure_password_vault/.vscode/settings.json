{
    // ============================================================================
    // VS Code Settings for Secure Password Vault Rust Project
    // ============================================================================
    // This configuration file optimizes VS Code for Rust development with:
    // - Rust Analyzer: Advanced IDE features for Rust
    // - Clippy: Rust linter for catching common mistakes
    // - Auto-formatting: Consistent code style
    // - Performance: Excludes target directory from file watching
    // ============================================================================
    // ============================================================================
    // Rust Analyzer Configuration
    // ============================================================================
    // Rust Analyzer is the official Rust language server providing:
    // - Code completion
    // - Go to definition
    // - Type hints
    // - Error checking
    // - Refactoring tools
    // ============================================================================
    // Use Clippy instead of cargo check for save-time checks
    // 
    // Why Clippy?
    // - Catches common mistakes and anti-patterns
    // - Enforces Rust idioms and best practices
    // - Provides more detailed warnings than basic cargo check
    // - Helps maintain code quality
    // 
    // Examples of what Clippy catches:
    // - Unnecessary clones
    // - Inefficient string operations
    // - Suspicious comparison operations
    // - Unused variables and imports
    "rust-analyzer.checkOnSave.command": "clippy",
    // Enable all Cargo features during analysis
    // 
    // Purpose:
    // - Ensures Rust Analyzer sees all code paths
    // - Provides completions for feature-gated code
    // - Catches errors in all feature combinations
    // 
    // For this project, enables analysis of:
    // - serde derive macros
    // - zeroize derive features
    // - chrono serde integration
    // - uuid v4 and serde features
    "rust-analyzer.cargo.allFeatures": true,
    // Enable inline type hints
    // 
    // Displays inferred types directly in the editor:
    // - Variable types: let x /* : i32 */ = 5;
    // - Function return types
    // - Closure parameter types
    // - Iterator chain types
    // 
    // Benefits:
    // - Helps understand complex type inference
    // - Educational for learning Rust's type system
    // - Reduces need to hover for type information
    // - Especially useful for generic code and iterators
    "rust-analyzer.inlayHints.enable": true,
    // ============================================================================
    // Editor Configuration
    // ============================================================================
    // Automatically format code on save
    // 
    // Uses rustfmt to ensure consistent code style:
    // - Indentation (4 spaces in Rust)
    // - Line length (default 100 characters)
    // - Brace placement
    // - Import ordering
    // 
    // Benefits:
    // - Eliminates style debates
    // - Consistent codebase formatting
    // - Reduces diff noise in version control
    // - Follows official Rust style guide
    "editor.formatOnSave": true,
    // ============================================================================
    // Language-Specific Settings
    // ============================================================================
    // Rust-specific editor configuration
    "[rust]": {
        // Set rust-analyzer as the default formatter for Rust files
        // 
        // rust-analyzer uses rustfmt internally, which:
        // - Is the official Rust code formatter
        // - Is used by the Rust project itself
        // - Follows the Rust Style Guide
        // - Is configurable via rustfmt.toml (if needed)
        // 
        // Alternative formatters exist, but rust-analyzer's integration
        // with rustfmt is the standard for Rust development
        "editor.defaultFormatter": "rust-lang.rust-analyzer"
    },
    // ============================================================================
    // Performance Optimization
    // ============================================================================
    // Exclude directories from VS Code's file watcher
    // 
    // The target/ directory contains:
    // - Compiled artifacts (binaries, libraries)
    // - Incremental compilation cache
    // - Dependencies' compiled code
    // - Debug symbols and metadata
    // 
    // Why exclude it?
    // - Huge directory (can be GBs for large projects)
    // - Constantly changes during compilation
    // - Not useful for file search or editing
    // - Watching it wastes CPU and memory
    // - Can slow down VS Code significantly
    // 
    // This is standard practice for all Rust projects
    "files.watcherExclude": {
        "**/target/**": true
    }
    // ============================================================================
    // Additional Notes
    // ============================================================================
    // 
    // Optional Settings You Might Want to Add:
    // 
    // 1. Show compilation errors inline:
    //    "rust-analyzer.diagnostics.enable": true
    // 
    // 2. Enable procedural macro support:
    //    "rust-analyzer.procMacro.enable": true
    // 
    // 3. Configure Clippy lints:
    //    "rust-analyzer.checkOnSave.extraArgs": [
    //        "--",
    //        "-W", "clippy::all",
    //        "-W", "clippy::pedantic"
    //    ]
    // 
    // 4. Memory optimization for large projects:
    //    "rust-analyzer.cargo.loadOutDirsFromCheck": true
    // 
    // 5. Exclude test binaries from watcher:
    //    "files.watcherExclude": {
    //        "**/target/**": true,
    //        "**/.git/**": true
    //    }
    // 
    // 6. Configure inlay hints verbosity:
    //    "rust-analyzer.inlayHints.parameterHints": true,
    //    "rust-analyzer.inlayHints.typeHints": true,
    //    "rust-analyzer.inlayHints.chainingHints": true
    // 
    // Project Structure Notes:
    // - src/: Source code (not excluded from watcher)
    // - target/: Build artifacts (excluded)
    // - Cargo.lock: Dependency versions (tracked in git)
    // - Cargo.toml: Project configuration (tracked in git)
    // 
    // ============================================================================
}